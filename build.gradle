plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// CSV
	implementation 'org.apache.commons:commons-csv:1.10.0'

	// Athena
	implementation 'software.amazon.awssdk:athena:2.25.10'
	implementation 'software.amazon.awssdk:s3:2.25.10'

	// DynamoDB
	implementation group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: '1.12.376'

	// Micrometer Prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn test // 테스트 후 리포트 생성

	reports {
		xml.required = true
		csv.required = false
		html.required = true // HTML 커버리지 리포트 생성
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/dto/**',
					'**/config/**',
					'**/exception/**',
					'**/AnalysisserviceApplication.*',
					'**/AnalysisserviceApplicationTests.*',
					'**/entity/**',
					'**/repository/**'
			])
		}))
	}
}
